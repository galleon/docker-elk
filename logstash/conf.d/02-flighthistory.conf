# 1. INPUT SECTION
# CSV file path supplied
input {
  file {
    path => ["/tmp/trainingFinalEval_flighthistory.csv"]
    sincedb_path => "/dev/null"     
    start_position => "beginning"
  }
}

# 2. FILTER SECTION
#The purpose of filter is 
filter { 

# CSV plugin to parse data
  csv {
    separator => ','
#Identifying all columns & remove unnecessary columns
    columns => ["id", "airline_code", "airline_icao_code", "flight_number", "departure_airport_code", "departure_airport_icao_code", "arrival_airport_code", "arrival_airport_icao_code", "published_departure", "published_arrival", "scheduled_gate_departure", "actual_gate_departure", "scheduled_gate_arrival", "actual_gate_arrival", "scheduled_runway_departure", "actual_runway_departure", "scheduled_runway_arrival", "actual_runway_arrival", "creator_code", "scheduled_air_time", "scheduled_block_time", "departure_airport_timezone_offset", "arrival_airport_timezone_offset", "scheduled_aircraft_type", "actual_aircraft_type", "icao_aircraft_type_actual"]
    remove_field => [ "airline_code", "departure_airport_code", "arrival_airport_code", "creator_code", "scheduled_aircraft_type", "scheduled_runway_departure", "scheduled_runway_arrival", "scheduled_air_time", "departure_airport_timezone_offset", "arrival_airport_timezone_offset", "actual_aircraft_type" ]
  }

# IGNORE THIS SECTION - relevant to geo_point,  to be used with future flight mission data
# if [latitude] and [longitude] {
#   mutate {
#     rename => [ "longitude", "[location][lon]", "latitude" , "[location][lat]" ]
#     add_field => { "lonlat" => [ "%{[location][lon]}", "%{[location][lat]}" ] }
#     convert => [ "[lonlat]", "float" ]
#     remove_field => [ "location" ]
#   }
# }
# 2013-09-11 16:35:00+00


# To  SKIP header row in CSV
 if [id] == "id" {
  drop {}
}

# Validation Checks for target visualizations
 if [actual_gate_departure] !~ /.+/ {
    drop {}
  }
  
 if [scheduled_gate_departure] !~ /.+/ {
    drop {}
  }

  if [actual_runway_arrival] !~ /.+/ {
    drop {}
  }

  if [actual_runway_departure] !~ /.+/ {
    drop {}
  }

  if [actual_gate_arrival] !~ /.+/ {
    drop {}
  }

  if [scheduled_gate_arrival] !~ /.+/ {
    drop {}
  }
  

#Mutate-convert is to modify the datatype of the field
  mutate {
    convert => { "departure_airport_timezone_offset" => "integer" }
    convert => { "arrival_airport_timezone_offset" => "integer" }
    convert => { "scheduled_air_time" => "integer" }
    convert => { "scheduled_block_time" => "integer" }
  }

# Parse the fields (of type date) using date filter
  if [published_departure] =~ /.+/ {
    date {
      match => [ "published_departure", "YYYY-MM-dd HH:mm:ssZ" ]
      target => "published_departure"
    }
  }

  if [published_arrival] =~ /.+/ {
    date {
      match => [ "published_arrival", "YYYY-MM-dd HH:mm:ssZ" ]
      target => "published_arrival"
    }
  }

  if [scheduled_runway_departure] =~ /.+/ {
    date {
      match => [ "scheduled_runway_departure", "YYYY-MM-dd HH:mm:ssZ" ]
      target => "scheduled_runway_departure"
    }
  }

  if [scheduled_runway_arrival] =~ /.+/ {
    date {
      match => [ "scheduled_runway_arrival", "YYYY-MM-dd HH:mm:ssZ" ]
      target => "scheduled_runway_arrival"
    }
  }

  date {
    locale => "en"
    match => [ "actual_gate_departure", "YYYY-MM-dd HH:mm:ssZ" ]
    target => "actual_gate_departure"
  }

  if [actual_runway_departure] =~ /.+/ {
    date {
      match => [ "actual_runway_departure", "YYYY-MM-dd HH:mm:ssZ" ]
      target => "actual_runway_departure"
    }
  }

  if [actual_runway_arrival] =~ /.+/ {
    date {
      match => [ "actual_runway_arrival", "YYYY-MM-dd HH:mm:ssZ" ]
      target => "actual_runway_arrival"
    }
  }

  if [actual_gate_arrival] =~ /.+/ {
    date {
      match => [ "actual_gate_arrival", "YYYY-MM-dd HH:mm:ssZ" ]
      target => "actual_gate_arrival"
    }
  }

  if [scheduled_gate_departure] =~ /.+/ {
    date {
      match => [ "scheduled_gate_departure", "YYYY-MM-dd HH:mm:ssZ" ]
      target => "scheduled_gate_departure"
    }
  }

  if [scheduled_gate_arrival] =~ /.+/ {
    date {
      match => [ "scheduled_gate_arrival", "YYYY-MM-dd HH:mm:ssZ" ]
      target => "scheduled_gate_arrival"
    }
  }

# Filter Plugin to execute Ruby code
  ruby {
    code => "
      event['actual_air_time'] = (event['actual_runway_arrival'] - event['actual_runway_departure']) / 3600 rescue nil
      event['delay_arrival'] = (event['actual_gate_arrival'] - event['scheduled_gate_arrival']) / 3600 rescue nil      
      event['delay_departure'] = (event['actual_gate_departure'] - event['scheduled_gate_departure']) / 3600 rescue nil
    "
    remove_field => [ "published_departure", "published_arrival", "scheduled_gate_departure", "scheduled_gate_arrival", "actual_gate_arrival", "actual_runway_departure", "actual_runway_arrival", "actual_gate_departure", "actual_gate_departure", "scheduled_block_time" ]
  }

}

#3. OUTPUT SECTION
output {
  # Standard pretty-outputting to console
  #stdout { 
  #  codec => rubydebug 
  #}
  
  # inserting document into elastic under index name=gequest.
  elasticsearch_http {
    host => "localhost"
    document_id => "%{id}"
    index => "gequest"
    index_type => "flights"
  }
 
  # Saving the extracted events into another CSV file
  #csv {
  #  path => "flights.csv"
  #  fields => ["id", "actual_gate_departure", "airline_icao_code", "departure_airport_icao_code", "arrival_airport_icao_code", "actual_air_time", "delay_arrival", "delay_departure", "scheduled_aircraft_type" ]
  #  # message_format => ""
  #}
}
